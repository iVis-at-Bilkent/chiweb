<?xml version="1.0" encoding="utf-8"?>

<!--
* Authors: Ebrahim Rajabzadeh
*
* Copyright: i-Vis Research Group, Bilkent University, 2009 - present 
-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="vertical"
	width="450"
	height="405"
	title="Layout Properties"
	showCloseButton="true"
	close="closeHandler(event)"
	xmlns:ivis="ivis.*">
	
	<mx:VBox width="100%" height="100%">
		
	<mx:TabNavigator id="tn" width="100%" height="100%"  change="onTabChange(event)" creationComplete="initTabNavigator(event)">
		<mx:HBox label="General" bottom="10" creationComplete="initGeneralValues(event)">
			<mx:VBox paddingTop="7" paddingLeft="10" paddingRight="10" width="100%" height="100%">
				<mx:CheckBox id="aol" label="Animate on Layout"/>
				<mx:CheckBox id="inc" label="Incremental Layout"/>
				<mx:CheckBox id="createBends" label="Create Bends as Needed"/>
				<mx:CheckBox id="uniformLeafNodeSizes" label="Uniform Leaf Node Sizes"/>
<!--			<mx:CheckBox id="uns" label="Uniform Node Size"/> -->
			</mx:VBox>
			<mx:VBox paddingLeft="10" paddingRight="10" width="100%" height="100%">
				<ivis:TitledBorderBox title="Layout Quality"
									  paddingTop="15" paddingLeft="5" paddingRight="5" paddingBottom="5"
									  width="50%" layout="vertical" borderColor="0xaaaaaa">
				<mx:Spacer width="100" />
					<mx:RadioButtonGroup id="quality" />
					<mx:RadioButton id="q1" label="Draft" groupName="quality" value="{Graph.DRAFT_QUALITY}"/>
					<mx:RadioButton id="q2" label="Default" groupName="quality" value="{Graph.DEFAULT_QUALITY}"/>
					<mx:RadioButton id="q3" label="Proof" groupName="quality" value="{Graph.PROOF_QUALITY}" />
				</ivis:TitledBorderBox>
			</mx:VBox>
		</mx:HBox>
		<mx:VBox label="CoSE" creationComplete="initCoSEValues(event)">
			<mx:VBox label="Tuning" paddingTop="-15" paddingBottom="-15" paddingLeft="10" paddingRight="10" height="100%" width="100%">
				<mx:Form>
					<mx:FormItem label="Spring Strength" height="22">
						<mx:HSlider id="ssSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Repulsion Strength" height="22">
						<mx:HSlider id="rsSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Gravity Strength" height="22">
						<mx:HSlider id="gsSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Gravity Range" height="22">
						<mx:HSlider id="grSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Compound Gravity Strength" height="22">
						<mx:HSlider id="cgsSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Compound Gravity Range" height="22">
						<mx:HSlider id="cgrSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Desired Edge Length" height="23">
						<mx:TextInput id="odelInput" width="60" />
					</mx:FormItem>
					<mx:FormItem label="Smart Range Calculation" height="22">
						<mx:CheckBox id="frGridVariant"/>
					</mx:FormItem>
					<mx:FormItem label="Smart Edge Length Calculation" height="22">
						<mx:CheckBox id="smartEdgeLengthCalc"/>
					</mx:FormItem>
					<mx:FormItem label="Multi-Level Scaling" height="22">
						<mx:CheckBox id="multiLevelScaling"/>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox label="CiSE" paddingTop="-15" paddingBottom="-15" creationComplete="initCiSEValues(event)">
			<mx:VBox label="Tuning" paddingLeft="10" paddingRight="10" width="100%">
				<mx:Form>
					<mx:FormItem label="Node Separation" height="23">
						<mx:TextInput id="nsInput" width="60" />
					</mx:FormItem>
					<mx:FormItem label="Desired Edge Length" height="23">
						<mx:TextInput id="idelInput" width="60" />
					</mx:FormItem>
					<mx:FormItem label="Inter-Cluster Edge Length Factor" height="22">
						<mx:HSlider id="icelfSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Allow Nodes Inside Circles" height="22">
						<mx:CheckBox id="allowNodesInsideCircle"/>
					</mx:FormItem>
					<mx:FormItem label="Max. Ratio Of Nodes Inside Circle" height="22">
						<mx:HSlider id="mronicSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
		</mx:VBox>
	</mx:TabNavigator>
	
	</mx:VBox>
	
	<mx:ControlBar width="100%">
		<mx:Spacer width="100%" />
		<mx:Button id="okButton" label="OK" width="70" click="closeHandler(event)"/>
		<mx:Button id="cancelButton" label="Cancel" width="70" click="closeHandler(event)"/>
	</mx:ControlBar>

	
	<mx:Binding source="ssSlider.value" destination="_springStrength" />
	<mx:Binding source="rsSlider.value" destination="_repulsionStrength" />
	<mx:Binding source="gsSlider.value" destination="_gravityStrength" />
	<mx:Binding source="grSlider.value" destination="_gravityRange" />
	<mx:Binding source="cgsSlider.value" destination="_compoundGravityStrength" />
	<mx:Binding source="cgrSlider.value" destination="_compoundGravityRange" />
	<mx:Binding source="odelInput.text" destination="_idealCoSEEdgeLength" />
	<mx:Binding source="frGridVariant.selected" destination="_frGridVariant" />
	<mx:Binding source="smartEdgeLengthCalc.selected" destination="_smartEdgeLengthCalc" />
	<mx:Binding source="multiLevelScaling.selected" destination="_multiLevelScaling" />
	
	<mx:Binding source="nsInput.text" destination="_nodeSeparation" />
	<mx:Binding source="idelInput.text" destination="_idealCiSEEdgeLength" />
	<mx:Binding source="icelfSlider.value" destination="_interClusterEdgeLengthFactor" />
	<mx:Binding source="allowNodesInsideCircle.selected" destination="_allowNodesInsideCircle" />
	<mx:Binding source="mronicSlider.value" destination="_maxRatioOfNodesInsideCircle" />
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.containers.TabNavigator;
			import mx.managers.PopUpManager;
			import mx.events.CloseEvent;
			
//			[Bindable]
			
			// General Parameters
//			private var quality: int
			public var _animateOnLayout: Boolean
			public var _incremental: Boolean
			public var _createBends: Boolean
			public var _uniformLeafNodeSize: Boolean
			
			// CoSE Parameters
			public var _springStrength: Number
			public var _repulsionStrength: Number
			public var _gravityStrength: Number
			public var _compoundGravityStrength: Number
			public var _gravityRange: Number
			public var _compoundGravityRange: Number
			public var _idealCoSEEdgeLength: String
			public var _frGridVariant: Boolean
			public var _smartEdgeLengthCalc: Boolean
			public var _multiLevelScaling: Boolean
			
			// CiSE Parameter
			public var _nodeSeparation: String
			public var _idealCiSEEdgeLength: String
			public var _interClusterEdgeLengthFactor: Number
			public var _allowNodesInsideCircle: Boolean
			public var _maxRatioOfNodesInsideCircle: Number
			
			private static var _lastTab:int = -1;
			private var _genInited: Boolean = false;
			private var _coseInited: Boolean = false;
			private var _ciseInited: Boolean = false;

			private function initTabNavigator(e: Event): void
			{
				if(_lastTab >= 0)
					tn.selectedIndex = PropertiesWindow._lastTab		
			}
			
			private function initGeneralValues(e: Event):void
			{
				var opts:* = Graph.getInstance().generalOptions
				
				this.quality.selectedValue = int(opts.quality)
				
				this._animateOnLayout = opts.animateOnLayout
				this.aol.selected = Boolean(this._animateOnLayout)
				
				this._incremental = opts.incremental
				this.inc.selected = Boolean(this._incremental)
					
				this._createBends = opts.createBends
				this.createBends.selected = Boolean(this._createBends)
					
				this._uniformLeafNodeSize = opts.uniformLeafNodeSize
				this.uniformLeafNodeSizes.selected = Boolean(this._uniformLeafNodeSize)
				
				this._genInited = true
			}
			
			private function initCoSEValues(e: Event):void
			{
				var coseOpts:* = Graph.getInstance().CoSEOptions
				
				this._springStrength = coseOpts.springStrength
				this.ssSlider.value = this._springStrength
				
				this._repulsionStrength = coseOpts.repulsionStrength
				this.rsSlider.value = this._repulsionStrength 
				
				this._gravityStrength = coseOpts.gravityStrength
				this.gsSlider.value = this._gravityStrength
				 
				this._gravityRange = coseOpts.gravityRange
				this.grSlider.value = this._gravityRange
					
				this._compoundGravityStrength = coseOpts.compoundGravityStrength
				this.cgsSlider.value = this._compoundGravityStrength
				 
				this._compoundGravityRange = coseOpts.compoundGravityRange
				this.cgrSlider.value = this._compoundGravityRange
					
				this._idealCoSEEdgeLength = coseOpts.idealCoSEEdgeLength
				this.odelInput.text = this._idealCoSEEdgeLength 
				
				this._frGridVariant = coseOpts.frGridVariant
				this.frGridVariant.selected = Boolean(this._frGridVariant)
				
				this._smartEdgeLengthCalc = coseOpts.smartEdgeLengthCalc
				this.smartEdgeLengthCalc.selected = Boolean(this._smartEdgeLengthCalc)
				
				this._multiLevelScaling = coseOpts.multiLevelScaling
				this.multiLevelScaling.selected = Boolean(this._multiLevelScaling)
					
				this._coseInited = true
			}

			private function initCiSEValues(e: Event):void
			{
				var ciseOpts:* = Graph.getInstance().CiSEOptions
				
				this._nodeSeparation = ciseOpts.nodeSeparation
				this.nsInput.text = this._nodeSeparation
				
				this._idealCiSEEdgeLength = ciseOpts.idealCiSEEdgeLength
				this.idelInput.text = this._idealCiSEEdgeLength 
				
				this._interClusterEdgeLengthFactor = ciseOpts.interClusterEdgeLengthFactor
				this.icelfSlider.value = this._interClusterEdgeLengthFactor
					
				this._allowNodesInsideCircle = ciseOpts.allowNodesInsideCircle
				this.allowNodesInsideCircle.selected = Boolean(this._allowNodesInsideCircle)
					
				this._maxRatioOfNodesInsideCircle = ciseOpts.maxRatioOfNodesInsideCircle
				this.mronicSlider.value = this._maxRatioOfNodesInsideCircle 
				
				this._ciseInited = true
			}
			
			private function onTabChange(e: Event): void
			{
				PropertiesWindow._lastTab = tn.selectedIndex;	
			}
			
			private function closeHandler(e: Event): void
			{
				if(e.target == okButton)
				{
					var g: Graph = Graph.getInstance()

					if(this._genInited)
						g.generalOptions = {
							quality: int(quality.selectedValue),
							animateOnLayout: Boolean(aol.selected),
							incremental: Boolean(inc.selected),
							createBends: Boolean(createBends.selected),
							uniformLeafNodeSize: Boolean(uniformLeafNodeSizes.selected)
						}

					if(this._coseInited)					
						g.CoSEOptions = {
							springStrength: int(this._springStrength),
							repulsionStrength: int(this._repulsionStrength),
							gravityStrength: int(this._gravityStrength),
							gravityRange: int(this._gravityRange),
							compoundGravityStrength: int(this._compoundGravityStrength),
							compoundGravityRange: int(this._compoundGravityRange),
							idealCoSEEdgeLength: int(this._idealCoSEEdgeLength),
							frGridVariant: Boolean(this._frGridVariant),
							smartEdgeLengthCalc: Boolean(this._smartEdgeLengthCalc),
							multiLevelScaling: Boolean(this._multiLevelScaling)
						}

					if(this._ciseInited)
						g.CiSEOptions = {
							nodeSeparation: int(this._nodeSeparation),
							idealCiSEEdgeLength: int(this._idealCiSEEdgeLength),
							interClusterEdgeLengthFactor: int(this._interClusterEdgeLengthFactor),
							allowNodesInsideCircle: Boolean(this._allowNodesInsideCircle),
							maxRatioOfNodesInsideCircle: int(this._maxRatioOfNodesInsideCircle)
						}
				}
				PopUpManager.removePopUp(this)
			}
		]]>
	</mx:Script>
</mx:TitleWindow>
