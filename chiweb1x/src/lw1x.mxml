<?xml version="1.0" encoding="utf-8"?>
<!--
* Authors: Ebrahim Rajabzadeh
*
* Copyright: i-Vis Research Group, Bilkent University, 2009 - present 
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	initialize="init()" xmlns:ivis="ivis.*"
	width="100%"
	pageTitle="i-Vis Layout Demo - Untitled">

	<mx:Style source="lw.css"/>

	<mx:VBox width="100%" verticalGap="0" id="vbox1">
		<mx:MenuBar id="mainMenu" dataProvider="{itemsCollection}" labelField="label" itemClick="menuHandler(event)" width="100%" />
		<mx:HBox width="100%" horizontalGap="1" paddingBottom="5" paddingTop="5">
			<mx:Spacer width="10"/>
			
			<mx:Button icon="@Embed(source='assets/new.png')"
				width="32"
				toolTip="New"
				click="{g.reset()}"/>
			<mx:Button icon="@Embed(source='assets/load.png')"
				width="32"
				toolTip="Load"
				click="loadXML()"/>
			<mx:Button icon="@Embed(source='assets/save.png')"
				width="32"
				toolTip="Save"
				click="saveXML()"/>
			<mx:Spacer width="10"/>

			<mx:Button icon="@Embed(source='assets/select.png')"
				width="32"
				id="toolButton1"
				toggle="true"
				toolTip="Select"
				selected="{g.isSeleting}"
				mouseUp="toolClickHandler(event)"/>
			<mx:Button icon="@Embed(source='assets/zoom-marquee.png')"
				width="32"
				id="toolButton2"
				toggle="true"
				toolTip="Marquee Zoom"
				selected="{g.isMarqueeZooming}"
				mouseUp="toolClickHandler(event)"/>
			<ivis:ZoomSlider graph="{g}" id="zoomSlider" height="32"/>
			<mx:Button icon="@Embed(source='assets/fit-to-100.png')"
				width="32"
				toolTip="Zoom to 100%"
				click="{g.zoom = 1; g.smoothPanTo(0, 0)}"/>
			<mx:Button icon="@Embed(source='assets/zoom-in.png')"
				width="32"
				toolTip="Zoom In"
				click="{g.zoomIn()}"/>
			<mx:Button icon="@Embed(source='assets/zoom-out.png')"
				width="32"
				toolTip="Zoom Out"
				click="{g.zoomOut()}"/>
			<mx:Button icon="@Embed(source='assets/fit-in-canvas.png')"
				width="32"
				toolTip="Fit in Canvas"
				click="{g.zoomToFit()}"/>
			<mx:Spacer width="10" />

			<mx:Button icon="@Embed(source='assets/create-node.png')"
				width="32"
				id="toolButton3"
				toggle="true"
				toolTip="Create Node"
				selected="{g.isCreatingSimpleNode}"
				mouseUp="toolClickHandler(event)"/>
			<mx:Button icon="@Embed(source='assets/create-compound-node.png')"
				width="32"
				id="toolButton4"
				toggle="true"
				toolTip="Create Compound Node"
				selected="{g.isCreatingCompoundNode}"
				mouseUp="toolClickHandler(event)"/>
			<mx:Button icon="@Embed(source='assets/create-edge.png')"
				width="32"
				id="toolButton5"
				toggle="true"
				toolTip="Create Edge"
				selected="{g.isAddingEdges}"
				mouseUp="toolClickHandler(event)"/>
			<mx:Button icon="@Embed(source='assets/delete.png')"
				width="32"
				toolTip="Delete Selected"
				click="deleteSelected()"/>
			<mx:Spacer width="10" />

			<mx:Button icon="@Embed(source='assets/layout-cose.png')"
				width="32"
				id="coseLayoutButton"
				toolTip="CoSE Layout"
				click="requestLayout('cose')"/>
			<mx:Button icon="@Embed(source='assets/layout-cise.png')"
				width="32"
				id="ciseLayoutButton"
				toolTip="CiSE Layout"
				click="requestLayout('cise')"/>
			<mx:Spacer width="10" />

			<mx:Button icon="@Embed(source='assets/help.png')"
				width="32"
				toolTip="How to Use"
				click="showWindow(HelpWindow)"/>
			<mx:Button icon="@Embed(source='assets/about.png')"
				width="32"
				toolTip="About"
				click="showWindow(AboutWindow)"/>
		</mx:HBox>
		<mx:HBox horizontalGap="0" id="hbox1">
			<mx:Canvas id="container">
				<mx:VScrollBar id="vsb" height="{g.height}" pageSize="200" x="{g.width}" y="0"/>
				<mx:HScrollBar id="hsb" width="{g.width}" pageSize="200" y="{g.height}" x="0" />
				<ivis:Graph id="g" x="0" y="0" width="800" height="500" 
					backgroundColor="0xFFFFFF" overlay="{gOverlay}"
					isSeleting="{toolButton1.selected}"
					isMarqueeZooming="{toolButton2.selected}"
					isCreatingSimpleNode="{toolButton3.selected}"
					isCreatingCompoundNode="{toolButton4.selected}"
					isAddingEdges="{toolButton5.selected}"
					zoomBuddy="{zoomSlider.slider}"
					miniMap="{mmap}"
					vscroll="{vsb}"
					hscroll="{hsb}"
				/>
				<mx:Canvas x="{g.x}" y="{g.y}" width="800" height="500" id="gOverlay" mouseEnabled="false"/>
			</mx:Canvas>
			<mx:Box paddingLeft="10">
				<mx:Panel title="Overview" backgroundAlpha="0" >
					<mx:UIComponent width="200" height="125" id="mmap"/>
				</mx:Panel>
			</mx:Box>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.managers.BrowserManager;
			import mx.core.ByteArrayAsset;
			import flash.utils.describeType;
			import mx.collections.ListCollectionView;
			import mx.core.IFlexDisplayObject;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.events.ItemClickEvent;
			import mx.graphics.codec.IImageEncoder;
			import mx.graphics.codec.JPEGEncoder;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.CursorManager;
			import ru.inspirit.net.MultipartURLLoader;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			import mx.events.MenuEvent;
			import ivis.*;
			
			private var loader: MultipartURLLoader = new MultipartURLLoader;
			private var coseUrl: String = "http://139.179.21.69/chilay1x/layout.jsp"
			private var ciseUrl: String = "http://139.179.21.69/chilay1x/layout.jsp"
//			private var coseUrl: String = "http://localhost:8080/chilay1x/layout.jsp"
//			private var ciseUrl: String = "http://localhost:8080/chilay1x/layout.jsp"
			
			private var editMenu: Object
//			private var cursorID: int = -1;
			
			[Embed('assets/cursors/node-cursor.gif')]
   			private var nodeCursor:Class;

			[Embed('assets/cursors/comp-node-cursor.gif')]
   			private var compNodeCursor:Class;

			[Embed('assets/cursors/edge-cursor.gif')]
   			private var edgeCursor:Class;

			[Embed(source='../samples/sample-compound01.graphml', mimeType='application/octet-stream')]
			private var sample_compound01: Class;
			[Embed(source='../samples/sample-compound02.graphml', mimeType='application/octet-stream')]
			private var sample_compound02: Class;
			[Embed(source='../samples/sample-compound03.graphml', mimeType='application/octet-stream')]
			private var sample_compound03: Class;
			[Embed(source='../samples/sample-compound04.graphml', mimeType='application/octet-stream')]
			private var sample_compound04: Class;
			[Embed(source='../samples/sample-compound05.graphml', mimeType='application/octet-stream')]
			private var sample_compound05: Class;
			
			[Embed(source='../samples/sample-clustered01.graphml', mimeType='application/octet-stream')]
			private var sample_clustered01: Class;
			[Embed(source='../samples/sample-clustered02.graphml', mimeType='application/octet-stream')]
			private var sample_clustered02: Class;
			[Embed(source='../samples/sample-clustered03.graphml', mimeType='application/octet-stream')]
			private var sample_clustered03: Class;
			[Embed(source='../samples/sample-clustered04.graphml', mimeType='application/octet-stream')]
			private var sample_clustered04: Class;
			[Embed(source='../samples/sample-clustered05.graphml', mimeType='application/octet-stream')]
			private var sample_clustered05: Class;
			
			[Embed(source='../samples/sample-general01.graphml', mimeType='application/octet-stream')]
			private var sample_general01: Class;
			[Embed(source='../samples/sample-general02.graphml', mimeType='application/octet-stream')]
			private var sample_general02: Class;
			[Embed(source='../samples/sample-general03.graphml', mimeType='application/octet-stream')]
			private var sample_general03: Class;
			[Embed(source='../samples/sample-general04.graphml', mimeType='application/octet-stream')]
			private var sample_general04: Class;
			
			[Bindable]
			private var itemsCollection: ArrayCollection = new ArrayCollection(
				[	
					{ label: "File", children:
						[
							{ label: "New" },
							{ label: "Load" },
							{ label: "Sample", children:
								[
									{ label: "Compound 1", xml: sample_compound01 },
									{ label: "Compound 2", xml: sample_compound02 },
									{ label: "Compound 3", xml: sample_compound03 },
									{ label: "Compound 4", xml: sample_compound04 },
									{ label: "Compound 5", xml: sample_compound05 },
									{ label: "Clustered 1", xml: sample_clustered01 },
									{ label: "Clustered 2", xml: sample_clustered02 },
									{ label: "Clustered 3", xml: sample_clustered03 },
									{ label: "Clustered 4", xml: sample_clustered04 },
									{ label: "Clustered 5", xml: sample_clustered05 },
									{ label: "General 1", xml: sample_general01 }, 
									{ label: "General 2", xml: sample_general02 }, 
									{ label: "General 3", xml: sample_general03 }, 
									{ label: "General 4", xml: sample_general04 } 
								]
							},
							{ label: "Save" } ,
							{ label: "Save as Image", children:
								[
									{ label: "PNG" },
									{ label: "JPEG" },
									{ label: "SVG" }
								]
							}
						]
					},
					editMenu = { label: "Edit", children:
						[
							{ label: "Select", type: "radio", groupName: "tools", toggled: true },
							{ label: "Marquee Zoom", type: "radio", groupName: "tools", toggled: false },
							{ label: "Create Simple Node", type: "radio", groupName: "tools", toggled: false },
							{ label: "Create Compound Node", type: "radio", groupName: "tools", toggled: false },
							{ label: "Create Edge", type: "radio", groupName: "tools", toggled: false },
							{ label: "Delete Selected" }
						]
					},
					{ label: "View", children:
						[
							{ label: "Actual Size" },
							{ label: "Zoom In" },
							{ label: "Zoom Out" },
							{ label: "Fit in Canvas" },
						]
					}, 
					{ label: "Cluster", children:
						[
							{ label: "Assign Selected to New Cluster" },
							{ label: "Randomly Assign Clusters" },
							{ label: "Reset Clusters of Selected" },
							{ label: "Color Using Cluster IDs" },
						]
					}, 
					{ label: "Layout", children:
						[
							{ label: "CoSE Layout" },
							{ label: "CiSE Layout" },
							{ label: "Layout Properties" },
						]
					},
					{ label: "Help", children:
						[
							{ label: "How to Use" },
							{ label: "About" }
						]
					}
				])

			private function toolButtonChange(e: Event): void
			{
				var b: Button = e.target as Button
				b.selected = true
				b.removeEventListener("change", toolButtonChange)
			}
			
			private function toolClickHandler(e: Event): void
			{
				var b: Button = e.target as Button
				if(b.selected)
				{
					b.addEventListener("change", toolButtonChange)
					e.stopImmediatePropagation()
					return
				}
				
//				if(cursorID > 0)
//				{
// 					CursorManager.removeCursor(cursorID)
// 					cursorID = -1
// 				}
				
				var i: int
				for(i = 0; i < 5; ++i) {
					if(editMenu.children[i].toggled)
						editMenu.children[i].toggled = false
				}
				i = int(b.id.substr(-1, 1)) - 1;

				editMenu.children[i].toggled = true
				itemsCollection.itemUpdated(editMenu.children[i], "toggled", false, true)
				
//				if(i == 2) {
//					 cursorID = CursorManager.setCursor(nodeCursor)
//				}
//				else if(i == 3) {
//					 cursorID = CursorManager.setCursor(compNodeCursor)
//				}
//				else if(i == 4) {
//					 cursorID = CursorManager.setCursor(edgeCursor)
//				}
			}
			
			private function menuHandler(e: MenuEvent): void
			{
				
//				if(cursorID > 0) {
// 					CursorManager.removeCursor(cursorID)
// 					cursorID = -1
// 				}
	
	 			var l: String = e.label.toString().toLowerCase()
	
				if(l == "new")
					g.reset();
				else if(l == "load")
					loadXML()
				else if(l.search(/(general|compound|clustered).+/) == 0) {
					loadSample(XML(new e.item.xml))
					BrowserManager.getInstance().setTitle("i-Vis Layout Demo - " + e.label);
				}
				else if(l == "save")
					saveXML("graphml")
				else if(l == "png" || l == "jpeg" || l == "svg")
					saveAsImage(l)
				else if(l == "select")
					g.isSeleting = true
				else if(l == "marquee zoom")
					g.isMarqueeZooming = true
				else if(l == "create simple node") {
 					g.isCreatingSimpleNode = true
// 					cursorID = CursorManager.setCursor(nodeCursor)
 				}
				else if(l == "create compound node") {
					g.isCreatingCompoundNode = true
// 					cursorID = CursorManager.setCursor(compNodeCursor)
				}
				else if(l == "create edge") {
					g.isAddingEdges = true
// 					cursorID = CursorManager.setCursor(edgeCursor)
				}
				else if(l == "delete selected")
					deleteSelected()
				else if(l == "actual size") {
					g.zoom = 1
					g.smoothPanTo(0, 0)
				}
				else if(l == "zoom in")
					g.zoomIn()
				else if(l == "zoom out")
					g.zoomOut()
				else if(l == "fit in canvas")
					g.zoomToFit()
				else if(l == "assign selected to new cluster")
					g.assignClusterIDs()
				else if(l == "randomly assign clusters")
					g.assignRandomClusterIDs()
				else if(l == "reset clusters of selected")
					g.resetClusterOfSelected()
				else if(l == "color using cluster ids")
					g.colorUsingClusterIDs()
				else if(l == "cose layout")
					requestLayout("cose")
				else if(l == "cise layout")
					requestLayout("cise")
				else if(l == "layout properties")
					showWindow(PropertiesWindow)
				else if(l == "how to use")
					showWindow(HelpWindow)
				else if(l == "about")
					showWindow(AboutWindow)
			}
			
			private function showWindow(w: Class): void
			{
                var props: IFlexDisplayObject = PopUpManager.createPopUp(this, w, true)
                
				props.x = (this.width - props.width) / 2
				props.y = (this.height- props.height) / 2
			}
			
			private function loadSample(xml: XML): void
			{
				g.fromGraphML(xml)
			}
			
			private function loadXML():void {
				var fr: FileReference = new FileReference();
				fr.addEventListener(Event.COMPLETE, function(e:Event):void {
					g.fromGraphML(XML(fr.data))
					var fileName: String = fr.name.replace(/\..*/, "")  
					BrowserManager.getInstance().setTitle("i-Vis Layout Demo - " + fileName);
				});
				fr.addEventListener(IOErrorEvent.IO_ERROR, function():void {
					trace("error laoding file");
				});
				fr.addEventListener(Event.SELECT, function(e:Event):void {
					trace("loading file");
					fr.load();
				});
				fr.browse([new FileFilter("GraphML (*.xml, *graphml)", "*.xml; *.graphml") ]);
			}

			internal function saveXML(format: String = "graphml"):void {
				var fr: FileReference = new FileReference();
				fr.addEventListener(Event.COMPLETE, function(e:Event):void {
					var fileName: String = fr.name.replace(/\..*/, "")  
					BrowserManager.getInstance().setTitle("i-Vis Layout Demo - " + fileName);
					trace("file saved successfully");
				});
				fr.addEventListener(IOErrorEvent.IO_ERROR, function():void {
					trace("error saving file");
				});
				fr.addEventListener(Event.SELECT, function(e:Event):void {
					trace("saving file");
				});
			
				var data: String = format == "graphml" ? g.toGraphML() : ""
				fr.save(data, "graph." + format);
			}
			
			private function onLayoutComplete(e: Event):void
			{
				var response: XML = XML(loader.getResponse())
				g.animateToNewPositions(response);
				coseLayoutButton.enabled = true;
				ciseLayoutButton.enabled = true;
				CursorManager.removeBusyCursor()
			}
			
			private function onLayoutError(e: Event): void
			{
				trace("error: " + e)
				coseLayoutButton.enabled = true;
				ciseLayoutButton.enabled = true;
				CursorManager.removeBusyCursor()
			}
			
			private function requestLayout(type: String): void {
				
				var ba: ByteArray = new ByteArray;
				ba.writeUTFBytes(g.toXML().toXMLString());
				loader.addFile(ba, "graph");

				// append options
				var go:* = g.generalOptions
				loader.addVariable("layoutQuality", go.quality)
				loader.addVariable("incremental", go.incremental)
				loader.addVariable("animateOnLayout", go.animateOnLayout)
				
				CursorManager.setBusyCursor();

				if(type == "cose")
				{
					coseLayoutButton.enabled = false;
					var co:* = g.CoSEOptions
					loader.addVariable("springStrength", co.springStrength)
					loader.addVariable("repulsionStrength", co.repulsionStrength)
					loader.addVariable("gravityStrength", co.gravityStrength)
					loader.addVariable("compoundGravityStrength", co.compoundGravityStrength)
					loader.addVariable("idealEdgeLength", co.idealEdgeLength)
					loader.addVariable("layoutStyle", "cose")
					loader.load(coseUrl);
				}
				else
				{
					// CiSE options
					ciseLayoutButton.enabled = false;
					var ci:* = g.CiSEOptions
					loader.addVariable("nodeSeparation", ci.nodeSeparation)
					loader.addVariable("desiredEdgeLength", ci.desiredEdgeLength)
					loader.addVariable("interClusterEdgeLengthFactor", ci.interClusterEdgeLengthFactor)
					loader.addVariable("layoutStyle", "cise")
					loader.load(ciseUrl);
				}				
			}
			
			internal function saveAsImage(format: String): void
			{
				format = format.toLocaleLowerCase()
				var useEncoder: Boolean = format == "png" || format == "jpeg"
				var encoder: IImageEncoder = format == "png" ? new PNGEncoder :
					(format == "jpeg" ? new JPEGEncoder : null)
				
				var data:*
				if(useEncoder)
				{
					var bm: BitmapData = g.getCompatibleBitmap(false)
					if(bm == null)
						return		// empty image!
						
					g.drawOnBitmap(bm)
					//var pixs: ByteArray = bm.getPixels(new Rectangle(0, 0, bm.width, bm.height))
					data = encoder.encode(bm)//encodeByteArray(pixs, bm.width, bm.height, false)
				}
				else
					data = g.toSvg()
					
				var fr: FileReference = new FileReference();
				fr.addEventListener(Event.COMPLETE, function(e:Event):void {
					trace("image saved successfully");
				});
				fr.addEventListener(IOErrorEvent.IO_ERROR, function():void {
					trace("error saving image");
				});
				fr.addEventListener(Event.SELECT, function(e:Event):void {
					trace("saving file");
				});
				fr.save(data, "graph." + format);
				
			}
			
			public function init(): void {

				loader.addEventListener("complete", onLayoutComplete)
				loader.addEventListener("ioError", onLayoutError);
				
//				g = Graph.getInstance();
//				var n1: Node = new Node("100", 30, 30)
//				n1.clusterID = 1;
//				g.addNode(n1);
//				
//				var n2: Node = new Node("200", 70, 190)
//				n2.clusterID = 1;
//				g.addNode(n2);
//
//				var n3: Node = new Node("300", 350, 100)
//				n3.clusterID = 1;
//				g.addNode(n3);
//
//				var n4: Node = new Node("400", 100, 150)
//				g.addNode(n4)
//
//				g.addEdge("100_200", "100", "200")
//				g.addEdge("100_300", "100", "300")
//				g.addEdge("200_400", "200", "400")
//				
//				g.colorUsingClusterIDs()
			}
			
			private function deleteSelected(): void {
				g.remove(g.selection);
				g.clearSelection()
			}
			
			private function reset(): void {
				g.reset();
			}
			
		]]>
	</mx:Script>
</mx:Application>
