<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
				initialize="main()" xmlns:ivis="ivis.*"
				width="1024" height="768"
				verticalScrollPolicy="off" horizontalScrollPolicy="off"
				pageTitle="ChiWeb Sample Application">

	<mx:Style source="sample.css"/>
	
	<mx:Canvas styleName="rawBox"
			   width="100%" height="100%"
			   verticalScrollPolicy="off" horizontalScrollPolicy="off"
			   autoLayout="true">
		
		<mx:Box id="graphBox" styleName="rawBox" width="100%" height="100%"
				verticalScrollPolicy="off" horizontalScrollPolicy="off"
				verticalAlign="middle" horizontalAlign="center"
				autoLayout="true"/>
	</mx:Canvas>
	
	<mx:MenuBar id="mainMenu"
				dataProvider="{menuItems}"
				labelField="label"
				width="100%"
				itemClick="app.handleMenuCommand(event)"/>
	
	<mx:HBox id="buttonBox" width="100%"
			 horizontalGap="1" paddingBottom="5" paddingTop="22">
		
		<mx:Button id="select" 
				   icon="@Embed(source='assets/buttons/select.png')"
				   width="32"
				   toolTip="Select"
				   click="app.select()"/>
		
		<mx:Spacer width="5" />
		
		<mx:VBox id="nodeSelectBox" width="{nodeComboBox.width}">
			<mx:Spacer height="1"/>
			
			<mx:ComboBox id="nodeComboBox" change="app.setNodeType(event)" >
				<mx:ArrayCollection>
					<mx:Object label="Circle" state="{Constants.ADD_CIRCULAR_NODE}"/>
					<mx:Object label="Gradient" state="{Constants.ADD_GRADIENT}"/>
					<mx:Object label="Image" state="{Constants.ADD_IMAGE_NODE}"/>
				</mx:ArrayCollection>
			</mx:ComboBox>
		</mx:VBox>
		
		<mx:Button id="addNode" 
				   icon="@Embed(source='assets/buttons/create-node.png')"
				   width="32"
				   toolTip="Add Node (of selected type)"
				   click="app.addNode(event)"/>
		
		<mx:Spacer width="5" />
		
		<mx:VBox id="edgeSelectBox" width="{edgeComboBox.width}">
			<mx:Spacer height="1"/>
			
			<mx:ComboBox id="edgeComboBox" change="app.setEdgeType(event)" >
				<mx:ArrayCollection>
					<mx:Object label="Simple" state="{Constants.ADD_DEFAULT_EDGE}"/>
					<mx:Object label="Dashed" state="{Constants.ADD_DASHED_EDGE}"/>
				</mx:ArrayCollection>
			</mx:ComboBox>
		</mx:VBox>
		
		<mx:Button id="addEdge"
				   icon="@Embed(source='assets/buttons/create-edge.png')"
				   width="32"
				   toolTip="Add Edge (of selected type)"
				   click="app.addEdge(event)"/>
		
		<mx:Spacer width="5" />
		
		<mx:Button id="addBendPoint" 
			   label="BP"
			   width="40"
			   toolTip="Add Bendpoint"
			   click="app.addBendPoint()"/>
		
		<mx:Button id="deleteSelected" 
				   icon="@Embed(source='assets/buttons/delete.png')"
				   width="32"
				   toolTip="Delete Selected Elements"
				   click="app.deleteSelected()"/>
		
		<mx:Spacer width="10" />
		
		<mx:Button id="enablePan" 
				   label="EP"
				   width="40"
				   toolTip="Enable Pan"
				   click="app.enablePan()"/>
		
		<mx:Button id="hideSelected" 
				   label="H"
				   width="32"
				   toolTip="Hide Selected Elements"
				   click="app.hideSelected()"/>
		
		<mx:Button id="showAll" 
				   label="SH"
				   width="40"
				   toolTip="Show All Elements"
				   click="app.showAll()"/>
		
		<mx:Spacer width="10" />
		
		<mx:VBox id="layoutSelectBox" width="{layoutComboBox.width}">
			<mx:Spacer height="1"/>
			
			<mx:ComboBox id="layoutComboBox" change="app.setLayoutType(event)" >
				<mx:ArrayCollection>
					<mx:Object label="CoSE" type="remote" style="CoSE"/>
					<mx:Object label="CiSE" type="remote" style="CiSE"/>
					<mx:Object label="Simple" type="local" style="n/a"/>
				</mx:ArrayCollection>
			</mx:ComboBox>
		</mx:VBox>
		
		<mx:Button id="performLayout"
				   icon="@Embed(source='assets/buttons/layout-cose.png')"
				   width="32"
				   toolTip="Perform Selected Layout"
				   click="app.performLayout(event)"/>
		
	</mx:HBox>
	
<mx:Script>
	<![CDATA[
		import flare.vis.operator.layout.CircleLayout;
		import flare.vis.operator.layout.ForceDirectedLayout;
		
		import ivis.controls.StateManager;
		
		import main.SampleMain;
		
		import util.Constants;
		
		public var app:SampleMain;
		
		private function main():void
		{
			app = SampleMain.instance;
			app.rootContainer = this;
			app.appManager.setGraphContainer(graphBox);
			app.appManager.setRootContainer(this);
			
			// TODO:
			// 1) replace button text with icons
			// 2) add a slider for zoom operation
			// 3) add another interface for pan
		}
		
		[Bindable]
		private var menuItems: ArrayCollection = new ArrayCollection(
			[
				{ label: "File", children:
					[
						{ label: "New" },
						{ label: "Load" },
						{ label: "Save" }
					]
				},
				/*
				editMenu = { label: "Edit", children:
					[
						{ label: "Select", type: "radio", groupName: "tools", toggled: true },
						{ label: "Marquee Zoom", type: "radio", groupName: "tools", toggled: false },
						{ label: "Create Simple Node", type: "radio", groupName: "tools", toggled: false },
						{ label: "Create Compound Node", type: "radio", groupName: "tools", toggled: false },
						{ label: "Create Edge", type: "radio", groupName: "tools", toggled: false },
						{ label: "Delete Selected" }
					]
				},
				*/
				{ label: "View", children:
					[
						{ label: "Actual Size" },
						{ label: "Zoom In" },
						{ label: "Zoom Out" },
						{ label: "Fit in Canvas" },
					]
				}, 
				/*
				{ label: "Cluster", children:
					[
						{ label: "Assign Selected to New Cluster" },
						{ label: "Randomly Assign Clusters" },
						{ label: "Reset Clusters of Selected" },
						{ label: "Color Using Cluster IDs" },
					]
				}, 
				*/
				{ label: "Layout", children:
					[
						{ label: "Remote Layout Properties" },
						{ label: "Local Layout Properties"}
					]
				},
				{ label: "Help", children:
					[
						{ label: "How to Use" },
						{ label: "About" }
					]
				}
			]);
	]]>
	</mx:Script>
	
</mx:Application>
		