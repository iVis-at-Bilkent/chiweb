<?xml version="1.0" encoding="utf-8"?>

<!--
* Authors: Ebrahim Rajabzadeh, Selcuk Onur Sumer
*
* Copyright: i-Vis Research Group, Bilkent University, 2009 - present 
-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="vertical"
	width="450"
	height="330"
	title="Layout Properties"
	showCloseButton="true"
	close="closeHandler(event)"
	xmlns:ivis="ivis.*" xmlns:gui="gui.*">
	
	<mx:VBox width="100%" height="100%">
		
	<mx:TabNavigator id="tn" width="100%" height="100%" change="onTabChange(event)" creationComplete="initTabNavigator(event)">
		<mx:VBox label="General" creationComplete="initGeneralValues(event)">
			<mx:HBox paddingLeft="10" paddingRight="10" width="100%" height="100%">
				<gui:TitledBorderBox title="General" width="100%" layout="vertical" borderColor="0xaaaaaa">
					<mx:CheckBox id="inc" label="Incremental Layout"/>
					<mx:CheckBox id="aol" label="Animate on Layout"/>
<!--				<mx:CheckBox id="uns" label="Uniform Node Size"/> -->
				</gui:TitledBorderBox>
				<gui:TitledBorderBox title="Layout Quality" width="100%" layout="vertical" borderColor="0xaaaaaa">
				<mx:Spacer width="100" />
					<mx:RadioButtonGroup id="quality" />
					<mx:RadioButton id="q1" label="Draft" groupName="quality" value="{RemoteLayout.DRAFT_QUALITY}"/>
					<mx:RadioButton id="q2" label="Default" groupName="quality" value="{RemoteLayout.DEFAULT_QUALITY}"/>
					<mx:RadioButton id="q3" label="Proof" groupName="quality" value="{RemoteLayout.PROOF_QUALITY}" />
				</gui:TitledBorderBox>

			</mx:HBox>
		</mx:VBox>
		<mx:VBox label="CoSE" creationComplete="initCoSEValues(event)">
			<mx:VBox label="Tuning" paddingLeft="10" paddingRight="10" width="100%">
				<mx:Form>
					<mx:FormItem label="Spring Strength" height="22">
						<mx:HSlider id="ssSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Repulsion Strength" height="22">
						<mx:HSlider id="rsSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Gravity Strength" height="22">
						<mx:HSlider id="gsSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Compound Gravity Strength" height="22">
						<mx:HSlider id="cgsSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
					<mx:FormItem label="Desired Edge Length" height="22">
						<mx:TextInput id="odelInput" width="60" />
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox label="CiSE" creationComplete="initCiSEValues(event)">
			<mx:VBox label="Tuning" paddingLeft="10" paddingRight="10" width="100%">
				<mx:Form>
					<mx:FormItem label="Node Separation" height="22">
						<mx:TextInput id="nsInput" width="60" />
					</mx:FormItem>
					<mx:FormItem label="Desired Edge Length" height="22">
						<mx:TextInput id="idelInput" width="60" />
					</mx:FormItem>
					<mx:FormItem label="Inter-Cluster Edge Length Factor" height="22">
						<mx:HSlider id="icelfSlider" minimum="0" maximum="100" showTrackHighlight="true"/>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
		</mx:VBox>
	</mx:TabNavigator>
	
	</mx:VBox>
	
	<mx:ControlBar width="100%">
		<mx:Spacer width="100%" />
		<mx:Button id="okButton" label="OK" width="70" click="closeHandler(event)"/>
		<mx:Button id="cancelButton" label="Cancel" width="70" click="closeHandler(event)"/>
	</mx:ControlBar>

	<mx:Binding source="ssSlider.value" destination="_springStrength" />
	<mx:Binding source="rsSlider.value" destination="_repulsionStrength" />
	<mx:Binding source="gsSlider.value" destination="_gravityStrength" />
	<mx:Binding source="cgsSlider.value" destination="_compoundGravityStrength" />
	<mx:Binding source="odelInput.text" destination="_idealEdgeLength" />
	<mx:Binding source="nsInput.text" destination="_nodeSeparation" />
	<mx:Binding source="idelInput.text" destination="_desiredEdgeLength" />
	<mx:Binding source="icelfSlider.value" destination="_interClusterEdgeLengthFactor" />

	<mx:Script>
		<![CDATA[
			import layout.RemoteLayout;
			
			import mx.binding.utils.BindingUtils;
			import mx.containers.TabNavigator;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			public var remoteLayout:RemoteLayout;
			
//			[Bindable]
//			private var quality: int
			public var _incremental: Boolean
			public var _animateOnLayout: Boolean
//			public var _uniformNodeSize: Boolean
			public var _springStrength: Number
			public var _repulsionStrength: Number
			public var _gravityStrength: Number
			public var _compoundGravityStrength: Number
			public var _idealEdgeLength: String
			public var _nodeSeparation: String
			public var _desiredEdgeLength: String
			public var _interClusterEdgeLengthFactor: Number
			private static var _lastTab:int = -1;
			private var _genInited: Boolean = false;
			private var _coseInited: Boolean = false;
			private var _ciseInited: Boolean = false;

			private function initTabNavigator(e: Event): void
			{
				if(_lastTab >= 0)
					tn.selectedIndex = RemoteLayoutOptions._lastTab		
			}
			
			public function initLayout(layout:RemoteLayout):void
			{
				this.remoteLayout = layout;
				/*
				this.initGeneralValues();
				this.initCoSEValues();
				this.initCiSEValues();
				*/
			}
			
			private function initGeneralValues(e: Event):void
			{
				//var opts:* = Graph.getInstance().generalOptions
				
				var opts:Object = this.remoteLayout.options.general;
				
				this._incremental = opts.incremental;
				this.inc.selected = Boolean(this._incremental);
				this._animateOnLayout = opts.animateOnLayout;
				this.aol.selected = Boolean(this._animateOnLayout);
				this.quality.selectedValue = int(opts.quality);
//				this._uniformNodeSize = opts.uniformNodeSize
//				this.uns.selected = Boolean(this._uniformNodeSize)
				
				this._genInited = true
			}
			
			private function initCoSEValues(e: Event):void
			{
				var coseOpts:Object = this.remoteLayout.options.cose;
					
				this._springStrength = coseOpts.springStrength;
				this.ssSlider.value = this._springStrength;
				
				this._repulsionStrength = coseOpts.repulsionStrength;
				this.rsSlider.value = this._repulsionStrength;
				
				this._gravityStrength = coseOpts.gravityStrength;
				this.gsSlider.value = this._gravityStrength;
				 
				this._compoundGravityStrength = coseOpts.compoundGravityStrength;
				this.cgsSlider.value = this._compoundGravityStrength;
				 
				this._idealEdgeLength = coseOpts.idealEdgeLength;
				this.odelInput.text = this._idealEdgeLength;
				
				this._coseInited = true;
			}

			private function initCiSEValues(e: Event):void
			{
				var ciseOpts:Object = this.remoteLayout.options.cise;
				
				this._nodeSeparation = ciseOpts.nodeSeparation
				this.nsInput.text = this._nodeSeparation
				
				this._desiredEdgeLength = ciseOpts.desiredEdgeLength
				this.idelInput.text = this._desiredEdgeLength 
				
				this._interClusterEdgeLengthFactor = ciseOpts.interClusterEdgeLengthFactor
				this.icelfSlider.value = this._interClusterEdgeLengthFactor
				
				this._ciseInited = true
			}
			
			private function onTabChange(e: Event): void
			{
				RemoteLayoutOptions._lastTab = tn.selectedIndex;	
			}
			
			private function closeHandler(e: Event): void
			{
				if(e.target == okButton)
				{
					var opts:Object = new Object();

					if(this._genInited)
					{
						opts.general = {
							quality: int(quality.selectedValue),
							incremental: Boolean(inc.selected),
							animateOnLayout: Boolean(aol.selected)//,
//							uniformNodeSize: Boolean(uns.selected)
						};
					}

					if(this._coseInited)
					{
						opts.cose = {
							springStrength: int(this._springStrength),
							repulsionStrength: int(this._repulsionStrength),
							gravityStrength: int(this._gravityStrength),
							compoundGravityStrength: int(this._compoundGravityStrength),
							idealEdgeLength: int(this._idealEdgeLength)
						};
					}

					if(this._ciseInited)
					{
						opts.cise = {
							nodeSeparation: int(this._nodeSeparation),
							desiredEdgeLength: int(this._desiredEdgeLength),
							interClusterEdgeLengthFactor: int(this._interClusterEdgeLengthFactor)
						};
					}
					
					this.remoteLayout.options = opts;
				}
				
				PopUpManager.removePopUp(this)
			}
		]]>
	</mx:Script>
</mx:TitleWindow>
